/**
 * Web Server
-HTTP 기반으로 동작
-정적 리소스 제공 (HTML, CSS, JS, Img, video)
    ex) NGINX, APACHE
 
 * WAS
-웹 서버 기능 포함 + (정적 리소스 제공 가능)
-프로그램 코드를 실행해서 ***애플리케이션 로직*** 수행
    동적 HTML, HTTP API(JSON)
        ex) Servlet, JSP, Spring MVC
        ex) Tomcat, Jetty

    정리 : WAS는 애플리케이션 코드를 실행하는데 더 특화

    Web Server(Front) -> WAS(Back) -> DB
    WAS는 잘 죽는다. 그래서 오류 화면 조차 띄울 수 없게 된다.
    그래서 오류화면은 HTML(WebServer)에 설정하여 띄운다.

* Servlet
    * 기존 석기시대 HTTP 스펙
    1.서버 TCP/IP 대기, 소켓연결
    2.HTTP 요청 메시지를 파싱해서 일기
    3.POST방식/ save URL 인지
    4.ContentType 확인
    5.HTTP 메시지 바디 내용 파싱
        -username, age 데이터를 사용할 수 있게 파싱

        POST / save HTTP/1.1
        Host:localhost:8080
        Content-Type : application/x-www-form-urlencoded
        username=kim&age=20

    6.저장 프로세스 실행
    ---------------------------------------------------------
    7.비즈니스 로직 실행
        -데이터베이스에 저장 요청     이 부분 제외 나머지는 Servlet이 모두 자동 생성
    ---------------------------------------------------------    
    8.HTTP 응답 메시지 생성 시작
        -HTTP 시작 라인 생성
        -Header 생성
        -메시지 바디에 HTML 생성해서 입력
        HTTP/1.1 200 OK
        Content-Type : text/html;charset=UTF-8
        Content-Length : 3423
        
        <html>
            <body>...<body>
        </html>
    9.TCP/IP에 응답 전달, 소켓 종료

    Servlet Container
    -tomcat 처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 한다.
    -서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기 관리
        서블릿 객체는 싱글톤(객체를 하나만 생성하고 모두가 공유)으로 관리
        최초 로딩 시점에서 서블릿 객체를 싱글톤으로 만들어두고 재활용
    -동시 요청을 위한 멀티 쓰레드 처리 지원(WAS가 자동으로 처리해줌)

* 쓰레드
  -애플리케이션 코드를 하나하나 순차적으로 실행하는 것을 쓰레드
  -쓰레드는 한번에 하나의 코드 라인만 수행
  -동시 처리가 필요하면 쓰레드를 추가 생성

  단점
  -쓰레드는 생성 비용이 비싸다.(Context-swiching coast)
        고객의 요청이 올 때 마다 쓰레드를 생성하면, 응답 속도가 늦어진다. 
  -쓰레드 생성에 제한이 없다.
        고객 요청이 너무 많이 오면, CPU, 메모리 임계점을 넘어서 서버가 죽을 수 있다.
  
  * 쓰레드 풀
    -쓰레드를 죽이고 생성이 아니라, 필요하면 가져다 쓰고, 다 쓰고난 후에는 다시 반납한다.
        필요한 쓰레드를 쓰레드 풀에 보관하고 관리, 톰캣은 최대 200개 기본 설정(변경 가능)
  장점
  쓰래드가 미리 생성되어 있어서, 쓰레드를 생성하고 종료하는 비용(CPU)가 절약되고, 응답 시간이 빠르다.

  * 맥스 쓰레드 풀
  사양이 낮아서 최대 쓰레드를 낮게 설정하면 대기하는 쓰레드들이 많이 생기게 되고 응답 지연이 발생
  사양이 높아서 최대 쓰레드를 높게 설정하면 CPU, 메모리 리소스 과부하로 서버 다운

  * 멀티 쓰레드(WAS가 다 해결해 준다.)
  개발자가 멀치 쓰레드 관련 코드를 신경쓰지 않아도 됨.(가장 중요)
  개발자는 마치 싱글 쓰레드 프로그래밍을 하듯이 편리하게 소스 코드를 개발

* HTTP API
    -HTML이 아니라 데이터를 전달
    -주로 JSON 형식 사용

    HTTP API 사용 3가지
    1.HTTP API - 앱 클라이언트(iphone, PC앱, Android) TO 서버
    2.HTTP API - 웹 브라우저(JavaScript) TO 서버
    3.HTTP API - 서버(주문) TO 서버(결제)

    백엔드 개발자가 서비스를 구성해야 될 때 고민해야 될 3가지 
    1.정적 리소스 어떻게 제공할거야
    2.동적으로 제공되는 페이지 어떻게 제공할거야
    3.http api 어떻게 제공할거야

    * SSR(서버 사이드 랜더링)
        -HTML 최종 결과를 서버에서 만들어서 웹 브라우저에 전달
        -주로 정적인 화면에 사용, javascript를 사용해서 화면 일부를 동적으로 변경 가능
            ex)관련기술 : JSP, 타임리프 -> BACKEND
    * CSR(클라이언트 사이드 랜더링)
        -HTML 결과를 자바스크립트를 사용해 웹 브라우저에서 동적으로 생성해서 적용
        -주로 동적인 화면에 사용, 웹 환경을 마치 앱 처럼 필요한 부분부분 변경 가능
            ex)구글 지도, Gmail, 구글 캘린더
            ex)React, Vue.js -> FRONTEND

* 스프링 MVC
    -@Annotaion
    -MVC 프레임워크의 춘추 전국 시대 마무리
* 스프링 부트의 등장
    -스프링 부트는 서버를 내장
    -과거에는 서버에 WAS를 직접 설치, 소스는 WAR 파일을 만들어서 설치한 WAS에 배포
    -스프링 부트는 빌드 결과(Jar)에 WAS 서버 포함(빌드 안에 톰캣을 포함 시킨다.) -> 빌드 배포 단순화

Servlet - JSP -MVC패턴 - Spring MVC
*/  
